
importModule("helma.logging", "logging");
importFromModule("templates", "*");

(function () {
   
   var logger = logging.getLogger(__name__);
   this.layoutChain = [];

   /**
    * Define a layout for this controller.
    *
    * @param {String} layout     Name of template file, without extension.
    * @param {Function} layout   Functions which returns a template file name.
    * @param {Object} param      Configuration object.
    * @param {String} param.except   Name, or array of action names, where the layout should not apply.
    * @param {String} param.only     Name, or array of action names, where the layout should apply exclusivly.
    */
   this.layout = function(layout, param) {
      Array.prototype.push.apply(
         this.layoutChain, 
         [new Layout(this, layout, param)]
      );   
   }
   
   
   /**
    * Set a layout for this controller, and override all prvious layout settings.
    *
    * @param {String} layout     Name of template file, without extension.
    * @param {Function} layout   Functions which returns a template file name.
    */
   this.setLayout = function(layout) {
      this.layoutChain = [new Layout(this, layout)];
   }   

   this.renderLayout = function() {
      var name = getLayoutName.apply(this);
      if (name === null) {
         res.write(this.content);
         return;
      }
      helma.skin.render("app/views/layouts/" + name + ".skin", { "yield" : this.content });
   }


   // private functions
   
   /**
    * Constructor for filter object.
    * @ignore
    */
   function Layout(controller, layout, param) {
      this.controller = controller;
      this.name = (Object.isFunction(layout)) ? layout.apply(controller) : layout;
      this.param = param || {};
      if (this.param.only && !Object.isArray(this.param.only)) this.param.only = [this.param.only];
      if (this.param.except && !Object.isArray(this.param.except)) this.param.except = [this.param.except];
   }
   
   /** @ignore */
   function getLayoutName() {
      for (var i=0; i<this.layoutChain.length; i++) {
         var layout = this.layoutChain[i];
         if (layout.param.only && !layout.param.only.include(req.route.action)) continue;
         if (layout.param.except && layout.param.except.include(req.route.action)) continue;
         return layout.name;
      }   
      return this.getShortName();
   }

}).call(this);


